SELECT * FROM EMPLOYEES;

SELECT * FROM DEPARTMENTS;

SELECT * FROM REGIONS;

SELECT * FROM LOCATIONS;

SELECT * FROM COUNTRIES;

SELECT * FROM JOB_HISTORY;

SELECT TABLE_NAME
FROM USER_TABLES;

--01. 사원의 FULL_NAME(FIRST_NAME + LAST_NAME) 과 이메일을 출력하라.
--(이메일@HR.COM 으로 출력하라.) 
SELECT FIRST_NAME||' '||LAST_NAME "FULL_NAME", EMAIL||'@HR.COM'
FROM EMPLOYEES;

--02. 06년 이후에 입사한 사원의 이름(FIRST_NAME) 과 사원번호 (EMPLOYEE_ID)를 출력하라.
SELECT FIRST_NAME, EMPLOYEE_ID
FROM EMPLOYEES
WHERE HIRE_DATE > '060101';

--03. 사원의 이름(FIRST), 부서이름(DEPARTMENT_NAME), 부서가 있는 거리(STREET_ADDRESS), 
--부서가 있는 나라(COUNTRY_NAME) 를 출력하라.
SELECT FIRST_NAME, DEPARTMENT_NAME, STREET_ADDRESS, COUNTRY_NAME
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID)
	JOIN LOCATIONS USING(LOCATION_ID)
		JOIN COUNTRIES USING (COUNTRY_ID);
	
SELECT FIRST_NAME, DEPARTMENT_NAME, STREET_ADDRESS, COUNTRY_NAME
FROM EMPLOYEES E, DEPARTMENTS D, LOCATIONS L, COUNTRIES C
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND D.LOCATION_ID = L.LOCATION_ID
AND L.COUNTRY_ID = C.COUNTRY_ID;
	
--04. '부서번호가 90이고, 전화번호가 515로 시작하면서, 끝자리가 4567인 사원'이 관리하는 
--사원의 사번과 이름을 출력하라.
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE MANAGER_ID = (SELECT EMPLOYEE_ID
					FROM EMPLOYEES
					WHERE DEPARTMENT_ID = 90  AND
						PHONE_NUMBER LIKE '515%4567');

--05. 성이 B로 시작하는 사원이 속한 부서의 부서번호와, B로 시작하는 사원의 수를 출력하라.
SELECT DEPARTMENT_ID, COUNT(*)
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'B%'
GROUP BY DEPARTMENT_ID;

--06. (5번 확장) 성이 B로 시작하는 사원이 속한 부서의 부서이름과 사원의 수를 출력하라.
SELECT DEPARTMENT_NAME, COUNT(*)
FROM DEPARTMENTS JOIN EMPLOYEES USING(DEPARTMENT_ID)
WHERE LAST_NAME LIKE 'B%'
GROUP BY DEPARTMENT_NAME;

--07. IT 프로그래머(IT_PROG : JOB_ID)의 평균 월급보다 더 많은 평균월급을 받는
--부서들의 직업 이름과(JOB_ID) 평균 월급을 출력하라.(월급을 내림차순으로 정렬하라.)
SELECT JOB_ID, AVG(SALARY)
FROM EMPLOYEES
HAVING AVG(SALARY) > (SELECT AVG(SALARY)
				FROM EMPLOYEES
				WHERE JOB_ID = 'IT_PROG')
GROUP BY JOB_ID
ORDER BY AVG(SALARY) DESC;

--08. 전화번호가 650.121.8009인 사원의 이름과, 사원이 속한 부서가 위치한 도시
--, 주소 를 출력하라.(이름 도시 주소)
SELECT FIRST_NAME "이름", CITY "도시", STREET_ADDRESS "주소" 
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID)
	JOIN LOCATIONS USING(LOCATION_ID)
WHERE PHONE_NUMBER = '650.121.8009';

--09. 캐나다에서 일하고 있는 사원의 이름과, 도시, 월급을 출력하라.
SELECT FIRST_NAME, CITY, SALARY
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID)
	JOIN LOCATIONS USING(LOCATION_ID)
		JOIN COUNTRIES USING(COUNTRY_ID)
WHERE COUNTRY_NAME = 'Canada';

--10. 이름이 Guy 인 사원과 같은 부서에서 일하면서, Guy와 직업(JOB_ID)이 다른 
--사원의 모든 것을 출력하라.
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
						FROM EMPLOYEES
						WHERE FIRST_NAME = 'Guy')
	AND JOB_ID != (SELECT JOB_ID
					FROM EMPLOYEES
					WHERE FIRST_NAME = 'Guy')

--11. 직책이 06년 7월 24일에 변경된 사원의 이름과, 과거 직업, 현재 직업을 출력하라.
SELECT FIRST_NAME "이름", H.JOB_ID "과거직업", E.JOB_ID "현재직업"
FROM EMPLOYEES E JOIN JOB_HISTORY H USING(EMPLOYEE_ID)
WHERE END_DATE = '060724';

--12. 관리자가 없는 부서의 이름과 부서번호를 출력하라.
SELECT DEPARTMENT_NAME, DEPARTMENT_ID --, MANAGER_ID
FROM DEPARTMENTS
WHERE MANAGER_ID IS NULL;

--13. 조인 키워드를 사용하지 않고, IT 부서 관리자의 성(LAST_NAME)과, 월급을 출력하라.
SELECT LAST_NAME, SALARY --, D.MANAGER_ID
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
	AND D.MANAGER_ID = (SELECT MANAGER_ID
						FROM DEPARTMENTS
						WHERE DEPARTMENT_NAME = 'IT');
	
--14. ROWNUM을 사용하여, 관리자가 존재하는 부서의 장소 중 가장 많은 장소의 도시 이름을
-- 출력하라.

-- 
SELECT *
FROM (SELECT CITY, ROWNUM AS R
		FROM (SELECT CITY, COUNT(*)
		FROM LOCATIONS JOIN DEPARTMENTS USING(LOCATION_ID)
		WHERE MANAGER_ID IS NOT NULL
		GROUP BY CITY
		ORDER BY COUNT(*) DESC)) B
		WHERE B.R = 3;
		
SELECT CITY, ROWNUM AS R
FROM (SELECT CITY, COUNT(*)
		FROM LOCATIONS JOIN DEPARTMENTS USING(LOCATION_ID)
		WHERE MANAGER_ID IS NOT NULL
		GROUP BY CITY
		ORDER BY COUNT(*) DESC)
	WHERE ROWNUM<3

--15. 입사일을 기준으로 18년도가 근속 10주년인 사원의 이름과 입사일을 출력하라.
SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(ADD_MONTHS(HIRE_DATE, 120), 'YYYY') = '2018';


--5조 문제

---1.유럽 대륙에서 근무하고있는 사원들의 커미션이 측정된 사원만 커미션순으로 내림차순 하고,
-- 측정된 사원의 이름과 대륙이름, 커미션, 직업을 출력 (희수)
SELECT FIRST_NAME, REGION_NAME, COMMISSION_PCT, JOB_ID
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID) 
	JOIN LOCATIONS USING(LOCATION_ID)
		JOIN COUNTRIES USING(COUNTRY_ID)
			JOIN REGIONS USING(REGION_ID)
WHERE COMMISSION_PCT IS NOT NULL AND REGION_NAME = 'Europe'
ORDER BY COMMISSION_PCT DESC;

---2.성이 'Marvins'인 사원의 월급보다 평균월급이 높은 부서를 부서이름, 도시를 출력하시오.(희수)
SELECT DEPARTMENT_NAME,CITY,AVG(SALARY) 
FROM EMPLOYEES JOIN DEPARTMENTS USING (DEPARTMENT_ID) 
		JOIN LOCATIONS USING (LOCATION_ID)
HAVING AVG(SALARY)>(SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME = 'Marvins')
GROUP BY DEPARTMENT_NAME, CITY;

---3.'United States of America' 에서 근무하는 매니저의 평균월급을 구하시오(준연)
 SELECT AVG(SALARY)
 FROM EMPLOYEES 
 WHERE EMPLOYEE_ID IN(SELECT MANAGER_ID 
 						FROM DEPARTMENTS 
 						JOIN LOCATIONS USING (LOCATION_ID)
 						JOIN COUNTRIES USING (COUNTRY_ID)
 						WHERE COUNTRY_NAME='United States of America');

-- 4. 직업(JOB_ID)별로 20,50,80번 부서(DEPARTMENT_ID)의 월급의 총합을 출력하시오.(준연)
-- ※ DECODE 사용하여 푸시오.
-- 부서별 해당 번호에 각각 별칭을 주시오.EX) 20번부서,50번부서,80번부서
SELECT JOB_ID,SUM(DECODE(DEPARTMENT_ID,20,SALARY)) "20번부서",
				SUM(DECODE(DEPARTMENT_ID,50,SALARY)) "50번부서",
					SUM(DECODE(DEPARTMENT_ID,80,SALARY)) "80번부서"
FROM EMPLOYEES
GROUP BY JOB_ID;

-- 5. 월급이 평균월급보다 더 많고  성(LAST_NAME)에 'u'를 포함하는 사람의 부서에서  근무하는 
-- 직원의 번호, 이름 ,급여를 표시하시오(준연)
SELECT EMPLOYEE_ID,FIRST_NAME,SALARY
FROM EMPLOYEES
WHERE SALARY>(SELECT AVG(SALARY)
				FROM EMPLOYEES) 
				AND DEPARTMENT_ID IN(SELECT DEPARTMENT_ID 
										FROM EMPLOYEES 
										WHERE LAST_NAME LIKE '%u%');

-- 6. 자신의 매니저보다 먼저 고용된 직원의 이름과 고용일,
-- 그리고 그 매니저의 이름과 고용일을 출력하시오
SELECT E.FIRST_NAME, E.HIRE_DATE, M.FIRST_NAME, M.HIRE_DATE
FROM EMPLOYEES E, EMPLOYEES M
WHERE E.MANAGER_ID = M.EMPLOYEE_ID AND E.HIRE_DATE < M.HIRE_DATE;
 

--7.각 직업명(job_title)별로 월급(salary)의 총합을 구하고자 한다.월급(salary) 총합이 가장 높은 업무부터 직업명과 월급을 출력하시오
--단 월급총합이 30,000보다 큰 업무만 출력하시오.(나)
SELECT J.JOB_TITLE, SUM(E.SALARY)
FROM JOBS J, EMPLOYEES E
WHERE E.JOB_ID = J.JOB_ID
GROUP BY J.JOB_TITLE
HAVING SUM(E.SALARY) > 30000
ORDER BY SUM(E.SALARY) DESC;

SELECT JOB_TITLE,SUM(SALARY)
FROM EMPLOYEES JOIN JOBS USING(JOB_ID)
GROUP BY JOB_TITLE
HAVING SUM(SALARY)>30000
ORDER BY SUM(SALARY) DESC;

--8.FIRST_NAME이 Lisa인 사람과 같은 부서에 근무하는 사람들의 이름과 월급을 내림차순 출력하고(윤회형님)

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Lisa')
ORDER BY SALARY DESC;

--9.여기서 가장 많은 월급을 받는 사람의 FIRST_NAME과 도시를 출력(윤회형님)
SELECT FIRST_NAME , CITY
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID) JOIN LOCATIONS USING(LOCATION_ID)
WHERE SALARY = (SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Lisa'));

--10. 입사일이 01 01 01 ~ 04 12 31 사이인 사원중 입사일이 02년인 사원을 제외하고
--이름, 급여, 부서번호, 입사일을 출력하자.(입사일을 오름차순으로 정렬)

SELECT FIRST_NAME, SALARY, DEPARTMENT_ID, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >= '010101'
AND HIRE_DATE <= '041231' AND HIRE_DATE NOT IN (SELECT HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '02%')
ORDER BY HIRE_DATE ASC;


-- 2조
-- 3. 각 사원 별 부서번호가 50인 곳에서, 성이 Nayer인 사람보다 늦게 고용되었으나
-- 해당 사원보다 많은 연봉을 받는 사원이 존재하는 모든 사원들의 LAST_NAME 을 출력하자.
SELECT LAST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50
	AND HIRE_DATE < (SELECT HIRE_DATE
					FROM EMPLOYEES
					WHERE LAST_NAME = 'Nayer')
				AND SALARY*12 > ANY (SELECT SALARY*12
									FROM EMPLOYEES)

-- 4조
--재원
--1. 직업이 'ST_CLERK'의 평균 월급보다 더 많은 평균 월급을 받는 부서들의 직업 이름과 평균월급을 출력하라.
--(월급을 오름차순으로 정렬)
SELECT JOB_TITLE, AVG(SALARY)
FROM JOBS JOIN EMPLOYEES USING(JOB_ID)
HAVING AVG(SALARY) > (SELECT AVG(SALARY)
						FROM EMPLOYEES
						WHERE JOB_ID = 'ST_CLERK')
GROUP BY JOB_TITLE
ORDER BY AVG(SALARY) ASC;
									
--2. jobs에서 최소,최대 월급의 합의 평균이 7000이상인 직업을 가진 사람들의 이름(first_name)과 	
--직업,월급,job_title을 출력하라.
SELECT FIRST_NAME, JOB_ID, SALARY, JOB_TITLE
FROM EMPLOYEES JOIN JOBS USING (JOB_ID)
WHERE JOB_ID IN (SELECT JOB_ID
				FROM JOBS
				WHERE (MIN_SALARY + MAX_SALARY)/2 > 7000)

--3. (2의 확장문제) ROWNUM을 사용하여 jobs에서 최소,최대 월급의 합의 평균이 7000이상인 직업을 가진 사람들 중
-- 두번째로 월급이 많은 job_title의 이름을 출력하라.
SELECT JOB_TITLE FROM
(SELECT JOB_TITLE, ROWNUM AS R FROM(SELECT FIRST_NAME, JOB_ID, SALARY, JOB_TITLE
									FROM EMPLOYEES JOIN JOBS USING (JOB_ID)
									WHERE JOB_ID IN (SELECT JOB_ID
													FROM JOBS
													WHERE (MIN_SALARY + MAX_SALARY)/2 > 7000)
									ORDER BY SALARY DESC)A)B
WHERE B.R = 2;

--4. 2006년 12월 31일에 직업이 바뀐 사람들 중 월급이 5000이상인 사원의 Fullname과 대륙, 나라, 도시
--,(최대 최소합 월급)을 출력하라.
SELECT FIRST_NAME || ' ' || LAST_NAME "Fullname", 
		REGION_NAME, COUNTRY_NAME, CITY, MIN_SALARY + MAX_SALARY "SUM_SAL"
FROM EMPLOYEES JOIN DEPARTMENTS USING (DEPARTMENT_ID)
	JOIN LOCATIONS USING (LOCATION_ID)
		JOIN COUNTRIES USING (COUNTRY_ID)
			JOIN REGIONS USING (REGION_ID)
				JOIN JOBS USING (JOB_ID)
					JOIN JOB_HISTORY USING (EMPLOYEE_ID)
WHERE END_DATE = '061231'
	AND SALARY > 5000;

--진희
--5. 핸드폰 앞번호가 515인 사원들의 성과 월급,휴대폰번호를 구하시오.
SELECT LAST_NAME,SALARY,PHONE_NUMBER
   FROM EMPLOYEES
   WHERE PHONE_NUMBER LIKE '515%';

--현정
--6. 성이 J 로 시작하는 사원의 평균 월급보다 더 적은 월급을 받는 직원들의 이름, 부서이름, 월급을 출력하라.
SELECT FIRST_NAME, DEPARTMENT_NAME, SALARY 
FROM EMPLOYEES JOIN DEPARTMENTS USING (DEPARTMENT_ID)
WHERE SALARY < (SELECT AVG(SALARY) 
				FROM EMPLOYEES 
				WHERE LAST_NAME LIKE 'J%');

--7.ROWNUM을 사용하여, 근속년수가 13년 이상인 사원이 가장 많은 직업의 JOB_ID와 직원의 수를 출력하라. 
SELECT JOB_ID, C FROM
   (SELECT A.*, ROWNUM AS R 
   FROM (SELECT JOB_ID, COUNT(*) AS C
         FROM EMPLOYEES 
         WHERE TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12) >= 13 
         GROUP BY JOB_ID ORDER BY COUNT(*) DESC) A
         ) B
WHERE B.R = 1;

--승연
--8. 도시 이름(CITY)이 T 로 시작하는 지역에 사는 사원들의 사번, LAST_NAME 및 부서 번호를 출력.
SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID)
	JOIN LOCATIONS USING(LOCATION_ID)
WHERE CITY LIKE 'T%';

--9. 각 업무(job) 별로 연봉(salary)의 합을 출력.
--연봉총합이 30,000보다 큰 업무를 연봉 총합이 가장 높은 업무부터 출력하시오.
SELECT JOB_ID, SUM(SALARY*12)
FROM EMPLOYEES
HAVING SUM(SALARY*12) > 30000
GROUP BY JOB_ID
ORDER BY SUM(SALARY*12) DESC;


--강사님
--10. 2007년 12월 31일에 직업이 바뀐 사람 중, 월급이 10000이상인 사원의 full name을 출력하라.
SELECT FIRST_NAME || ' ' || LAST_NAME "FULL NAME"
FROM EMPLOYEES JOIN JOB_HISTORY USING(EMPLOYEE_ID)
WHERE SALARY > 10000
	AND END_DATE = '071231';

